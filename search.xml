<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python程序设计 作业4 数字照片墙</title>
    <url>/2021/06/17/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E4%BD%9C%E4%B8%9A4-%E6%95%B0%E5%AD%97%E7%85%A7%E7%89%87%E5%A2%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="设计思路："><a href="#设计思路：" class="headerlink" title="设计思路："></a>设计思路：</h1><p>使用<code>Pillow</code>分别构建同样大小的图片<code>text.jpg</code>、<code>wall.jpg</code>，再根据两张图片的相同位置的像素情况构建<code>final.jpg</code></p>
<h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><p>首先将图片统一重命名待用。然后构建<code>text.jpg</code>来存放照片墙的文字图层。之后随机选择照片，调整其大小，按顺序粘贴组成一张大的图片<code>wall.jpg</code>来存放照片墙的背景图层。最后新建一张空的大小一样的图片<code>final.jpg</code>。通过<code>Pillow.getpixel()</code>获取两张图的像素信息，逐个像素进行比较，若<code>text.jpg</code>中的一点像素为大红色，则对<code>final.jpg</code>的同一点使用<code>Pillow.putpixel()</code>赋同一点处<code>wall.jpg</code>的像素信息。</p>
<h1 id="关键代码说明"><a href="#关键代码说明" class="headerlink" title="关键代码说明"></a>关键代码说明</h1><h2 id="构建文字图层"><a href="#构建文字图层" class="headerlink" title="构建文字图层"></a>构建文字图层</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text=<span class="string">&quot;41802198&quot;</span> <span class="comment"># 设置文字图层内容</span></span><br><span class="line">ft=ImageFont.truetype(<span class="string">&quot;shuma.ttf&quot;</span>, <span class="built_in">int</span>(BIG_HEIGHT*<span class="number">1</span>))   <span class="comment"># 选择字体和字体大小</span></span><br><span class="line">text_image=Image.new(<span class="string">&quot;RGB&quot;</span>, (BIG_WIDTH,BIG_HEIGHT)) <span class="comment"># 新建一张空图</span></span><br><span class="line">draw = ImageDraw.Draw(text_image)</span><br><span class="line">draw.text((<span class="number">0</span>,<span class="number">0</span>), text,font=ft,fill=<span class="string">&quot;red&quot;</span>)   <span class="comment"># 写入字</span></span><br><span class="line">text_image.save(<span class="string">&quot;text.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="构建背景图层"><a href="#构建背景图层" class="headerlink" title="构建背景图层"></a>构建背景图层</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wall_image=Image.new(<span class="string">&quot;RGB&quot;</span>, (BIG_WIDTH,BIG_HEIGHT)) <span class="comment"># 新建空图</span></span><br><span class="line"><span class="comment"># 通过循环粘贴小图片成大图片</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(BIG_WIDTH//SMALL_WIDTH):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(BIG_HEIGHT//SMALL_HEIGHT):</span><br><span class="line">        num=random.randint(<span class="number">1</span>,<span class="number">10</span>)    <span class="comment"># 随机选图</span></span><br><span class="line">        tmp=Image.<span class="built_in">open</span>(<span class="string">&quot;photo/&quot;</span>+<span class="built_in">str</span>(num)+<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">        tmp=tmp.resize((SMALL_WIDTH,SMALL_HEIGHT),Image.NEAREST)    <span class="comment"># 调整大小</span></span><br><span class="line">        wall_image.paste(tmp,(x*SMALL_WIDTH,y*SMALL_HEIGHT))  <span class="comment">#粘贴图片   </span></span><br><span class="line">wall_image.save(<span class="string">&quot;wall.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="构建最终图片"><a href="#构建最终图片" class="headerlink" title="构建最终图片"></a>构建最终图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wall_image=Image.new(<span class="string">&quot;RGB&quot;</span>, (BIG_WIDTH,BIG_HEIGHT)) <span class="comment"># 新建空图</span></span><br><span class="line"><span class="comment"># 通过循环粘贴小图片成大图片</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(BIG_WIDTH//SMALL_WIDTH):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(BIG_HEIGHT//SMALL_HEIGHT):</span><br><span class="line">        num=random.randint(<span class="number">1</span>,<span class="number">10</span>)    <span class="comment"># 随机选图</span></span><br><span class="line">        tmp=Image.<span class="built_in">open</span>(<span class="string">&quot;photo/&quot;</span>+<span class="built_in">str</span>(num)+<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">        tmp=tmp.resize((SMALL_WIDTH,SMALL_HEIGHT),Image.NEAREST)    <span class="comment"># 调整大小</span></span><br><span class="line">        wall_image.paste(tmp,(x*SMALL_WIDTH,y*SMALL_HEIGHT))  <span class="comment">#粘贴图片   </span></span><br><span class="line">wall_image.save(<span class="string">&quot;wall.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img data-src="https://img-blog.csdnimg.cn/20210618162145251.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70#pic_center" alt="照片墙"></p>
<h1 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h1><p>本次作业考察的主要对图片的操作，难度不大。需要我们对图片各种格式、通道有所了解。其余的无非就是一些简单的判断以及赋值。本次作业完成的方法有很多，每一种都能帮助我们更好地学习图片的相关知识，希望大家都能多尝试几种方法，学习到更多相关知识。</p>
<p>本作业已上传至Github以及Gitee，希望各位能点个star再走 :smile:。</p>
<p><a href="https://github.com/GLORYFeonix/Python_Learning_Homework">GitHub</a></p>
<p><a href="https://gitee.com/gzy8810/Python_Learning_Homework">Gitee</a></p>
]]></content>
      <categories>
        <category>Python程序设计</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python程序设计 作业5 送你一首集句诗</title>
    <url>/2021/06/18/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E4%BD%9C%E4%B8%9A5-%E9%80%81%E4%BD%A0%E4%B8%80%E9%A6%96%E9%9B%86%E5%8F%A5%E8%AF%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="设计思路："><a href="#设计思路：" class="headerlink" title="设计思路："></a>设计思路：</h1><p>利用字典存放每个人对应的诗句和诗名，用pillow库构建图片。</p>
<h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><p>首先利用<code>.csv</code>文件存储人名，根据.csv文件中的项构建空字典。读入《全唐诗》的<code>.txt</code>文件，根据正则表达式找出人名中的每个字的诗句，同时将其诗名与这句诗组成一个list。再将这些list组成一个list。使用<code>random</code>函数从每个字的list中抽取一句作为诗句。将其存入之前的空字典中。这样，在这个字典中，<code>.csv</code>文件中的每一项对应字典的一个key，一个key对应的一个list，存放的是4个list，分别对应“赠”以及人名的三个字的诗句和诗名。</p>
<p>之后使用<code>pillow</code>库构建图片。事先从晚上下好5张图片作为背景，利用<code>random</code>函数挑选其中一张作为一张卡片的背景。利用<code>pillow</code>的<code>resize</code>调整大小，用<code>pillow.ImageDraw</code>库生成对应文字最终保存。</p>
<h1 id="关键代码说明"><a href="#关键代码说明" class="headerlink" title="关键代码说明"></a>关键代码说明</h1><h2 id="构建字典部分"><a href="#构建字典部分" class="headerlink" title="构建字典部分"></a>构建字典部分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = csv.reader(<span class="built_in">open</span>(<span class="string">&#x27;name.csv&#x27;</span>))    <span class="comment"># 读入csv文件</span></span><br><span class="line">names = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> f:</span><br><span class="line">    names.append(item[<span class="number">0</span>])   <span class="comment"># 将文件中的每一项加入list中</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;tangshi.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 读入txt文件</span></span><br><span class="line">lines = f.readlines()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">names_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    name = <span class="string">&#x27;赠&#x27;</span>+name    <span class="comment"># 构建诗名</span></span><br><span class="line">    content = []</span><br><span class="line">    which_poem = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        estring = name[i]+<span class="string">&#x27;[^，。（）！？《》：；””]&#123;6&#125;[，。！？]&#x27;</span>  <span class="comment"># 构建诗句的正则表达式</span></span><br><span class="line">        e1 = re.<span class="built_in">compile</span>(estring)</span><br><span class="line">        estring = <span class="string">&#x27;【[^】]*】&#x27;</span>  <span class="comment"># 构建诗名的正则表达式</span></span><br><span class="line">        e2 = re.<span class="built_in">compile</span>(estring)</span><br><span class="line">        poem_name = <span class="string">&quot;&quot;</span></span><br><span class="line">        find_result = []</span><br><span class="line">        <span class="comment"># 根据正则表达式寻找结果并加入list</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            line = line.replace(<span class="string">u&#x27;\u3000&#x27;</span>, <span class="string">u&#x27; &#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span>(e2.findall(line) != []):</span><br><span class="line">                poem_name = line[line.find(<span class="string">&#x27;【&#x27;</span>):line.rfind(<span class="string">&quot;\\&quot;</span>)]</span><br><span class="line">            <span class="keyword">if</span>(e1.findall(line) != []):</span><br><span class="line">                result = [poem_name, e1.findall(line)[<span class="number">0</span>]]</span><br><span class="line">                find_result.append(result)</span><br><span class="line">        result = random.choice(find_result) <span class="comment"># 利用random函数挑选结果</span></span><br><span class="line">        <span class="comment"># 重构标点符号</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            result[<span class="number">1</span>] = result[<span class="number">1</span>][<span class="number">0</span>:<span class="number">7</span>]+<span class="string">&#x27;，&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">            biaodian = [<span class="string">&#x27;。&#x27;</span>, <span class="string">&#x27;？&#x27;</span>, <span class="string">&#x27;！&#x27;</span>]</span><br><span class="line">            result[<span class="number">1</span>] = result[<span class="number">1</span>][<span class="number">0</span>:<span class="number">7</span>]+biaodian[temp]</span><br><span class="line">        content.append(result)</span><br><span class="line">    names_dict[name] = content  <span class="comment"># 最终加入字典</span></span><br></pre></td></tr></table></figure>

<h2 id="构建图片部分"><a href="#构建图片部分" class="headerlink" title="构建图片部分"></a>构建图片部分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names_dict:</span><br><span class="line">    num=random.randint(<span class="number">1</span>,<span class="number">5</span>) <span class="comment"># 使用random函数挑选背景图片</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&#x27;background/&#x27;</span>+<span class="built_in">str</span>(num)+<span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">    img=img.resize((<span class="number">800</span>,<span class="number">1000</span>))  <span class="comment"># 使用resize函数调整背景图片大小</span></span><br><span class="line">    draw = ImageDraw.Draw(img)</span><br><span class="line">    font = ImageFont.truetype(font=<span class="string">&#x27;JiangPanJiuShiYue-2.ttf&#x27;</span>, size=<span class="number">36</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 信头部分</span></span><br><span class="line">    draw.text(xy=(<span class="number">100</span>,<span class="number">150</span>),text=<span class="string">&quot;亲爱的&quot;</span>,fill=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),font=font)</span><br><span class="line">    draw.text(xy=(<span class="number">208</span>,<span class="number">150</span>),text=name[<span class="number">1</span>:],fill=(random.randint(<span class="number">0</span>,<span class="number">255</span>),random.randint(<span class="number">0</span>,<span class="number">255</span>),random.randint(<span class="number">0</span>,<span class="number">255</span>)),font=font)</span><br><span class="line">    draw.text(xy=(<span class="number">300</span>,<span class="number">150</span>),text=<span class="string">&quot;：&quot;</span>,fill=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),font=font)</span><br><span class="line">    draw.text(xy=(<span class="number">172</span>,<span class="number">200</span>),text=<span class="string">&quot;为您写了首诗，希望您喜欢：&quot;</span>,fill=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),font=font)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 诗的部分</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> si <span class="keyword">in</span> names_dict[name]:</span><br><span class="line">        draw.text(xy=(<span class="number">172</span>,<span class="number">250</span>+i*<span class="number">50</span>),text=si[<span class="number">1</span>][<span class="number">0</span>],fill=(random.randint(<span class="number">0</span>,<span class="number">255</span>),random.randint(<span class="number">0</span>,<span class="number">255</span>),random.randint(<span class="number">0</span>,<span class="number">255</span>)),font=font)</span><br><span class="line">        draw.text(xy=(<span class="number">208</span>, <span class="number">250</span>+i*<span class="number">50</span>), text=si[<span class="number">1</span>][<span class="number">1</span>:], fill=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), font=font)</span><br><span class="line">        i=i+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 信尾部分</span></span><br><span class="line">    draw.text(xy=(<span class="number">172</span>,<span class="number">500</span>),text=<span class="string">&quot;此致&quot;</span>,fill=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),font=font)</span><br><span class="line">    draw.text(xy=(<span class="number">100</span>,<span class="number">550</span>),text=<span class="string">&quot;敬礼！&quot;</span>,fill=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),font=font)</span><br><span class="line">    draw.text(xy=(<span class="number">550</span>,<span class="number">650</span>),text=<span class="string">&quot;郭泽宇&quot;</span>,fill=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),font=font)</span><br><span class="line">    draw.text(xy=(<span class="number">550</span>,<span class="number">700</span>),text=<span class="string">&quot;2021/6/17&quot;</span>,fill=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),font=font)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 备注部分</span></span><br><span class="line">    font = ImageFont.truetype(font=<span class="string">&#x27;MoRanXingKai-2.ttf&#x27;</span>, size=<span class="number">12</span>)</span><br><span class="line">    draw.text(xy=(<span class="number">100</span>,<span class="number">600</span>),text=<span class="string">&quot;备注：&quot;</span>,fill=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),font=font)</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> si <span class="keyword">in</span> names_dict[name]:</span><br><span class="line">        draw.text(xy=(<span class="number">136</span>, <span class="number">600</span>+i*<span class="number">15</span>), text=si[<span class="number">0</span>], fill=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), font=font)</span><br><span class="line">        i=i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存图片</span></span><br><span class="line">    file_path=<span class="string">&quot;card/&quot;</span>+name+<span class="string">&quot;.png&quot;</span></span><br><span class="line">    img.save(file_path)</span><br></pre></td></tr></table></figure>

<h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img data-src="https://img-blog.csdnimg.cn/2021061717013446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70#pic_center" alt="赠刘德华"></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210617170150187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70#pic_center" alt="赠林场就"></p>
<h1 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h1><p>本次作业考察的主要是我们对课堂上讲过的正则表达式以及各类容器的使用，难度并不是很大。而耗费时间最多的部分反而在于最终构建贺卡的部分。一开始我选择的是使用markdown构建贺卡之后转成pdf，遇到的困难主要有构建markdown文件时的格式（换行，背景等）以及最终将md文件转成pdf文件。而后一项始终未能解决，因此在耗费大量时间之后不得不重新更换成使用pillow库构建图片的方式来完成本次作业。</p>
<p>我一开始真没想到，md文件转成pdf文件不好转，也没想到python写md会有如此多的问题。因此耗费了大量的时间。这提醒我们在完成目标前，需要对方法进行充分的了解、判断，不能盲目开做，最终只会费力不讨好。</p>
<p>本作业已上传至Github以及Gitee，希望各位能点个star再走 :smile:。</p>
<p><a href="https://github.com/GLORYFeonix/Python_Learning_Homework">GitHub</a></p>
<p><a href="https://gitee.com/gzy8810/Python_Learning_Homework">Gitee</a></p>
]]></content>
      <categories>
        <category>Python程序设计</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>初中，雨天，窗外，车厢，王心凌</title>
    <url>/2021/11/25/%E5%88%9D%E4%B8%AD%EF%BC%8C%E9%9B%A8%E5%A4%A9%EF%BC%8C%E7%AA%97%E5%A4%96%EF%BC%8C%E8%BD%A6%E5%8E%A2%EF%BC%8C%E7%8E%8B%E5%BF%83%E5%87%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>
			<script>
				console.error("ReferenceError: value is not defined");
			</script>

<p>《爱不爱》刚发售，是我买的第一张Cyndi的专辑。</p>
<p>12月的广州，似乎并没有与其他季节有太多的不同。正如这一天也与平常没有区别一样。但看着车窗上流下来的雨滴，感受着微凉的空调，我默默地循环着这张专中的《忘了我也不错》和《匿名的安慰》，莫名地觉得今天有了它独特的味道。</p>
<p><img data-src="https://i.loli.net/2021/11/25/VmHiM4oQt5DE2PW.jpg" alt="《爱不爱》Cover.jpg"></p>
]]></content>
      <categories>
        <category>心情随笔</category>
      </categories>
      <tags>
        <tag>王心凌</tag>
      </tags>
  </entry>
  <entry>
    <title>Python程序设计 大作业 简化的PS</title>
    <url>/2021/06/23/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E5%A4%A7%E4%BD%9C%E4%B8%9A-%E7%AE%80%E5%8C%96%E7%9A%84PS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="项目背景和意义"><a href="#项目背景和意义" class="headerlink" title="项目背景和意义"></a>项目背景和意义</h1><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>随着时代的发展，人们对于修图的需求越来越大，在生活中随处可见处理过的图片，原模原样的图片已经很少见了，在基本的手机自带的相机中，都有着一大堆对于图像进行处理的功能。在学习完本学期的Python课程之后，我对GUI界面编程十分感兴趣，所以打算用PyQt5结合Pillow库，制作一个简单的修图软件。</p>
<h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>通过搭建基本的软件GUI界面，和对Pillow库的使用，增强了我的编程能力。在项目开始之前，我对于PyQt5的GUI搭建和Pillow库还不是很了解，需要上网寻找资料，进行自学。这锻炼了我们收集信息的能力。在编程过程中，难免会出现一个又一个的bug，这时候就需要自己进行程序的调试。但有的时候是自己对于程序背后的理解有误，例如对于信号传递机制的理解不够到位等。在不断的处理bug的过程中，增强了我解决问题的能力。遇到问题，不断克服问题。看着一个项目从无到有，被自己一点点的构建起来，这极大的增强了我编程的自信和能力。经过此次开发，我对于项目开发的基本流程有了一定的了解，不再是盲目的开发，想到哪里就写哪里。而是在开始就对程序进行拆分，分成不同的部分，一步一步地分开进行实现。先实现最基本的一部分功能，之后为其添砖加瓦。先实现可用的软件，再继续实现其他。并在程序中注意响应变化，为未来程序的扩展进行准备。在真正的项目中，需求也是在一直变化的，所以我们要注意响应的变化。</p>
<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><h2 id="基本的主界面的分析"><a href="#基本的主界面的分析" class="headerlink" title="基本的主界面的分析"></a>基本的主界面的分析</h2><p>主界面主要是由一个<code>QLabel</code>标签和一个自定义的组件（继承于<code>QTabWidget</code>）来实现，主窗口继承于<code>QMainWindow</code>，<code>QLabel</code>用于显示图片的处理结果，<code>QTabWidget</code>用来存放对于图片的操作的选项，如调整大小和添加水印等。主页面继承于<code>QMainWidget</code>，可以实现对应的菜单栏和状态栏，来实现打开图片和保存图片等功能。</p>
<h2 id="对于图片的各个参数的调整"><a href="#对于图片的各个参数的调整" class="headerlink" title="对于图片的各个参数的调整"></a>对于图片的各个参数的调整</h2><p>用四个<code>QSlider</code>来实现对于照片的亮度，长宽和旋转角度的调整。为了让调节的参数更加的直观可见，加入<code>QLabel</code>来实现对<code>QSlier</code>数值的显示。可设置<code>QSlider</code>的范围为-100到100，这样就既可以使参数正向增加也可以负向减少了。对于图像的各个参数，直接传入这样的值是显然不行的，要通过一些基础的方法，来进行数值的转换，转成图片可以接受的参数。其中，亮度可以使用<code>Pillow. ImageEnhance</code>模块进行操作。大小可以使用<code>PyQt5.QtGui</code>的<code>QPixmap.resize()</code>进行操作。旋转可以使用<code>Pillow</code>的<code>Image.rotate()</code>进行操作。在调节过程中，难免会有调错，想要重新复原的需求。为了避免手动调整参数到初始值这种繁杂的操作，因此加入了3个重置按钮来重置照片的各个参数。在打开图片之前，同样需要调用这三个重置方法来实现各个数值和<code>QSlider</code>的复位。</p>
<h2 id="水印"><a href="#水印" class="headerlink" title="水印"></a>水印</h2><p>要实现图片的添加水印的功能，添加一个按钮来进行水印的添加和去除。使用<code>Pillow.ImageDraw</code>模块在图片的左上角添加一个“Watermark”的字样作为水印。并在添加之后，让按钮的显示内容变为“去除水印”，用于去除水印，来灵活地实现水印的添加和去除。</p>
<h1 id="概要和详细设计"><a href="#概要和详细设计" class="headerlink" title="概要和详细设计"></a>概要和详细设计</h1><h2 id="代码总框图"><a href="#代码总框图" class="headerlink" title="代码总框图"></a>代码总框图</h2><p><img data-src="https://img-blog.csdnimg.cn/20210624204104643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70#pic_center" alt="代码总框架"><br>其中，<code>Photoshop.py</code>是软件主体窗体，以及执行部分，<code>Widget_self.py</code>是自定义控件部分，<code>Variabel.py</code>是全局变量与常量部分，<code>ProcessPhoto.py</code>是图片处理方法部分。</p>
<h2 id="各部分框图"><a href="#各部分框图" class="headerlink" title="各部分框图"></a>各部分框图</h2><h3 id="菜单栏以及其三个事件"><a href="#菜单栏以及其三个事件" class="headerlink" title="菜单栏以及其三个事件"></a>菜单栏以及其三个事件</h3><p><img data-src="https://img-blog.csdnimg.cn/20210624204438288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70#pic_center" alt="菜单栏以及其三个事件"></p>
<h3 id="调整图片的各个参数"><a href="#调整图片的各个参数" class="headerlink" title="调整图片的各个参数"></a>调整图片的各个参数</h3><p><img data-src="https://img-blog.csdnimg.cn/20210624204510911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70#pic_center" alt="调整图片的各个参数"></p>
<h3 id="水印-1"><a href="#水印-1" class="headerlink" title="水印"></a>水印</h3><p><img data-src="https://img-blog.csdnimg.cn/20210624204541449.png#pic_center" alt="水印"></p>
<h3 id="全局变量与常量"><a href="#全局变量与常量" class="headerlink" title="全局变量与常量"></a>全局变量与常量</h3><p><img data-src="https://img-blog.csdnimg.cn/20210624204611237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70#pic_center" alt="全局变量与常量"></p>
<h3 id="处理图片的Process类"><a href="#处理图片的Process类" class="headerlink" title="处理图片的Process类"></a>处理图片的Process类</h3><p><img data-src="https://img-blog.csdnimg.cn/20210624204644230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70#pic_center" alt="处理图片的Process类"></p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="python版本以及库版本说明"><a href="#python版本以及库版本说明" class="headerlink" title="python版本以及库版本说明"></a>python版本以及库版本说明</h2><p><code>Python</code>: 3.9.5 64-bit<br><code>PyQt5</code>: 5.15.4<br><code>PyQt5-stubs</code>: 5.15.2.0<br><code>PyQt5-sip</code>: 12.9.0<br><code>PyQt5-Qt5</code>: 5.15.2<br><code>Pillow</code>: 8.2.0</p>
<h2 id="所使用的关键库"><a href="#所使用的关键库" class="headerlink" title="所使用的关键库"></a>所使用的关键库</h2><h3 id="PyQt5"><a href="#PyQt5" class="headerlink" title="PyQt5"></a>PyQt5</h3><p>版本5.15.4，是主要的搭建界面所用的库，完成整个界面的搭建，在整个实验过程中使用了其中的多个组件，并完成事件的响应，响应鼠标的各种点击事件。</p>
<h3 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h3><p>版本8.2.0，<code>Pillow</code>是<code>python</code>自带的处理图片的库，整个过程中的图片处理都通过这个库来实现，包括调整大小，水印滤镜等功能。</p>
<h3 id="Sys"><a href="#Sys" class="headerlink" title="Sys"></a>Sys</h3><p>保证程序的正常运行所调用的库。</p>
<h2 id="各个文件的说明"><a href="#各个文件的说明" class="headerlink" title="各个文件的说明"></a>各个文件的说明</h2><h3 id="Photoshop-py"><a href="#Photoshop-py" class="headerlink" title="Photoshop.py"></a>Photoshop.py</h3><p>主要的程序文件，进行主要的界面搭建以及运行，这里是程序的入口文件。</p>
<h3 id="Widget-self-py"><a href="#Widget-self-py" class="headerlink" title="Widget_self.py"></a>Widget_self.py</h3><p>在该文件中，主要进行自定义组件，包括调整图片参数的<code>QSlider</code>，显示<code>QSlider</code>数值的<code>QLabel</code>，进行重置功能和加水印功能的<code>QButton</code>。并为每个组件链接响应事件的函数，来完成对于图片的不同处理。</p>
<h3 id="Variable-py"><a href="#Variable-py" class="headerlink" title="Variable.py"></a>Variable.py</h3><p>用于存放在整个程序中用到的全局变量，各种常量，并为每种全局变量提供<code>.get()</code>和<code>.set()</code>方法，用于得到和设置全局变量。各种常量用于规定窗口的大小等。如果将来需求发生变化，需要改变初始窗口的大小，可以直接在这个文件中进行改变，增强了软件响应变化的能力。</p>
<h3 id="ProcessPhoto-py"><a href="#ProcessPhoto-py" class="headerlink" title="ProcessPhoto.py"></a>ProcessPhoto.py</h3><p>对图片进行处理的文件，每一次对图片进行处理，都需要进行调用其中的函数，包括改变亮度、调整大小、旋转图片和添加水印。并提供改变的接口，方便其他<code>python</code>文件进行调用。</p>
<h2 id="关键代码说明"><a href="#关键代码说明" class="headerlink" title="关键代码说明"></a>关键代码说明</h2><h3 id="Photoshop-py-1"><a href="#Photoshop-py-1" class="headerlink" title="Photoshop.py"></a>Photoshop.py</h3><h4 id="初始化自定义组件"><a href="#初始化自定义组件" class="headerlink" title="初始化自定义组件"></a>初始化自定义组件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTab</span>(<span class="params">QTabWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.parent = parent</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加自定义组件</span></span><br><span class="line">        self.adjust_tab = AdjustTab()</span><br><span class="line">        self.addTab(self.adjust_tab, <span class="string">&quot;调整参数&quot;</span>)    <span class="comment"># 设置其显示名称</span></span><br><span class="line">        self.setMaximumHeight(<span class="number">300</span>)      <span class="comment"># 设置其最大高度</span></span><br></pre></td></tr></table></figure>

<p>说明：自定义组件<code>MyTab</code>的实现，继承于<code>QTabWidget</code>类，为其添加了一个Tab用于操作图片。</p>
<h4 id="初始化软件主窗口"><a href="#初始化软件主窗口" class="headerlink" title="初始化软件主窗口"></a>初始化软件主窗口</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 初始化界面</span></span><br><span class="line">    <span class="comment"># 设置状态栏</span></span><br><span class="line">    self.statusbar = self.statusBar()</span><br><span class="line">    self.statusbar.showMessage(<span class="string">&#x27;Ready&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置菜单栏</span></span><br><span class="line">    <span class="comment"># 新建打开动作</span></span><br><span class="line">    openAct = QAction(<span class="string">&#x27;打开&#x27;</span>, self)  <span class="comment"># 打开动作</span></span><br><span class="line">    openAct.setShortcut(<span class="string">&#x27;Ctrl+O&#x27;</span>)   <span class="comment"># 打开快捷键</span></span><br><span class="line">    openAct.setStatusTip(<span class="string">&#x27;打开文件&#x27;</span>)    <span class="comment"># 打开提示</span></span><br><span class="line">    openAct.triggered.connect(self.openImage)   <span class="comment"># 连接打开事件</span></span><br><span class="line">    <span class="comment"># 新建保存动作</span></span><br><span class="line">    saveAct = QAction(<span class="string">&#x27;保存&#x27;</span>, self)  <span class="comment"># 保存动作</span></span><br><span class="line">    saveAct.setShortcut(<span class="string">&#x27;Ctrl+S&#x27;</span>)   <span class="comment"># 保存快捷键</span></span><br><span class="line">    saveAct.setStatusTip(<span class="string">&#x27;保存文件&#x27;</span>)    <span class="comment"># 保存提示</span></span><br><span class="line">    saveAct.triggered.connect(self.SaveEvent)   <span class="comment"># 连接保存事件</span></span><br><span class="line">    <span class="comment"># 新建退出动作</span></span><br><span class="line">    exitAct = QAction(<span class="string">&#x27;退出&#x27;</span>, self)  <span class="comment"># 退出动作</span></span><br><span class="line">    exitAct.setShortcut(<span class="string">&#x27;Ctrl+E&#x27;</span>)   <span class="comment"># 退出快捷键</span></span><br><span class="line">    exitAct.setStatusTip(<span class="string">&#x27;退出软件&#x27;</span>)    <span class="comment"># 退出提示</span></span><br><span class="line">    exitAct.triggered.connect(self.close)   <span class="comment"># 连接退出事件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新建一个菜单栏</span></span><br><span class="line">    menubar = self.menuBar()</span><br><span class="line">    fileMenu = menubar.addMenu(<span class="string">&#x27;文件&#x27;</span>)  <span class="comment"># 设置菜单栏显示的内容</span></span><br><span class="line">    <span class="comment"># 加入上述三个事件</span></span><br><span class="line">    fileMenu.addAction(openAct)</span><br><span class="line">    fileMenu.addAction(saveAct)</span><br><span class="line">    fileMenu.addAction(exitAct)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 布局</span></span><br><span class="line">    <span class="comment"># 图片显示部分</span></span><br><span class="line">    imagelabel = QLabel(<span class="string">&quot;&quot;</span>)  <span class="comment"># 使用QLabel来显示图片</span></span><br><span class="line">    Variable.set_imagelabel(imagelabel)  <span class="comment"># 将QLabel放置到全局变量</span></span><br><span class="line">    imagelabel.setAlignment(Qt.AlignCenter)  <span class="comment"># 中心对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改操作部分</span></span><br><span class="line">    self.mytab = MyTab(self)    <span class="comment"># 使用自定义控件来进行操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置框垂直布局</span></span><br><span class="line">    vbox = QVBoxLayout()</span><br><span class="line">    vbox.addWidget(imagelabel)</span><br><span class="line">    vbox.addWidget(self.mytab)</span><br><span class="line">    <span class="comment"># 将布局页面设置到主窗口中间</span></span><br><span class="line">    main_frame = QWidget()</span><br><span class="line">    main_frame.setLayout(vbox)</span><br><span class="line">    self.setCentralWidget(main_frame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 窗口设置</span></span><br><span class="line">    self.resize(Variable.WINDOW_WIDTH, Variable.WINDOW_HEIGHT)  <span class="comment"># 调整大小</span></span><br><span class="line">    self.center()   <span class="comment"># 让窗口出现在屏幕中间</span></span><br><span class="line">    self.setWindowTitle(<span class="string">&#x27;简易PS&#x27;</span>)   <span class="comment"># 窗口标题</span></span><br><span class="line">    self.setWindowIcon(QIcon(<span class="string">&#x27;Mini Photoshop/ps.ico&#x27;</span>))  <span class="comment"># 窗口图标</span></span><br><span class="line">    self.show()  <span class="comment"># 呈现窗口</span></span><br></pre></td></tr></table></figure>

<p>说明：实现GUI组件的摆放，并添加菜单栏和状态栏，并为这些东西添加Action，并将其绑定到对应的函数上。</p>
<h4 id="打开文件的方法"><a href="#打开文件的方法" class="headerlink" title="打开文件的方法"></a>打开文件的方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">openImage</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 打开文件事件</span></span><br><span class="line">    imagelabel = Variable.get_imagelabel()  <span class="comment"># 从全局变量中获取QLabel</span></span><br><span class="line"></span><br><span class="line">    fname, _ = QFileDialog.getOpenFileName(</span><br><span class="line">        self, <span class="string">&#x27;打开图片&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;Image files (*.jpg *.png)&quot;</span>)  <span class="comment"># 打开对话框来进行文件选择，获得文件路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> fname:   <span class="comment"># 防止文件路径为空导致错误，设置一个条件来判断是否执行，之后的其他事件与此相同</span></span><br><span class="line">        image = Image.<span class="built_in">open</span>(fname)   <span class="comment"># 使用Pillow库来打开文件</span></span><br><span class="line">        Variable.set_image(image)   <span class="comment"># 将其保存到全局变量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将几个操作参数复位</span></span><br><span class="line">        self.mytab.adjust_tab.reset()</span><br><span class="line">        self.mytab.adjust_tab.resize()</span><br><span class="line">        self.mytab.adjust_tab.rerotation()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 呈现图片</span></span><br><span class="line">        qimg = ImageQt(image)   <span class="comment"># 先将Image转成QImage</span></span><br><span class="line">        img_pix = QPixmap.fromImage(</span><br><span class="line">            qimg, Qt.AutoColor)  <span class="comment"># 再从QImage转成QPixmap</span></span><br><span class="line">        img_pix = img_pix.scaled(</span><br><span class="line">            Variable.DEFAULT_WIDTH, Variable.DEFAULT_HEIGHT, Qt.KeepAspectRatio)    <span class="comment"># 将QPixmap按图片比例调整大小至可放入QLabel</span></span><br><span class="line">        imagelabel.setPixmap(img_pix)   <span class="comment"># 放入QLabel</span></span><br><span class="line">        <span class="comment"># 将此时的长宽存入全局变量</span></span><br><span class="line">        Variable.set_width(img_pix.width())</span><br><span class="line">        Variable.set_height(img_pix.height())</span><br><span class="line">        <span class="comment"># 记录图片的现时大小（注：之前只是修改了QPixmap的大小，这里指的是记录图片的目前大小，方便之后复用）</span></span><br><span class="line">        process.change_width(<span class="number">0</span>)</span><br><span class="line">        process.change_height(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>说明：该函数用于打开图片，当用户点击打开时，就会调用这个函数，用<code>QFileDialog.getOpenFileName</code>来获得图片的路径，之后调用<code>Pillow</code>来打开图片，同时更改用来存储图片的全局变量。为了保证多次打开之间不会相互影响，在每次打开图片之后，调用各个组件的重置函数。</p>
<h4 id="保存文件的方法"><a href="#保存文件的方法" class="headerlink" title="保存文件的方法"></a>保存文件的方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SaveEvent</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 保存文件事件</span></span><br><span class="line">    filename, _ = QFileDialog.getSaveFileName(</span><br><span class="line">        self, <span class="string">&quot;文件保存&quot;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;Image files (*.jpg *.png)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        image = Variable.get_image()    <span class="comment"># 获取全局变量中的image进行操作</span></span><br><span class="line">        process.change_save(filename)   <span class="comment"># 改变保存标志</span></span><br><span class="line">        process.process_photo(image)    <span class="comment"># 保存文件</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>说明：该函数用来响应保存事件，获得保存路径之后，改变保存标识，调用<code>process_photo()</code>方法进行保存。</p>
<h4 id="关闭软件的方法"><a href="#关闭软件的方法" class="headerlink" title="关闭软件的方法"></a>关闭软件的方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">closeEvent</span>(<span class="params">self, event</span>):</span></span><br><span class="line">    <span class="comment"># 关闭软件事件</span></span><br><span class="line">    reply = QMessageBox.question(self, <span class="string">&#x27;温馨提示&#x27;</span>,</span><br><span class="line">                                 <span class="string">&quot;你确定要退出吗？&quot;</span>, QMessageBox.Yes |</span><br><span class="line">                                 QMessageBox.No, QMessageBox.No)    <span class="comment"># 关闭弹出确认框</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确认框的响应事件</span></span><br><span class="line">    <span class="keyword">if</span> reply == QMessageBox.Yes:</span><br><span class="line">        event.accept()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        event.ignore()</span><br></pre></td></tr></table></figure>

<p>说明：该函数用来响应窗口关闭事件，询问是否退出程序。</p>
<h4 id="设置菜单的功能"><a href="#设置菜单的功能" class="headerlink" title="设置菜单的功能"></a>设置菜单的功能</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contextMenuEvent</span>(<span class="params">self, event</span>):</span></span><br><span class="line">    <span class="comment"># 菜单内容</span></span><br><span class="line">    cmenu = QMenu(self)</span><br><span class="line"></span><br><span class="line">    opnAct = cmenu.addAction(<span class="string">&quot;打开&quot;</span>)</span><br><span class="line">    saveAct = cmenu.addAction(<span class="string">&quot;保存&quot;</span>)</span><br><span class="line">    action = cmenu.exec_(self.mapToGlobal(event.pos()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> action == opnAct:</span><br><span class="line">        self.openImage()</span><br><span class="line">    <span class="keyword">if</span> action == saveAct:</span><br><span class="line">        self.SaveEvent()</span><br></pre></td></tr></table></figure>

<p>说明：用来响应用户在界面上的鼠标右击事件，显示一个菜单，可以进行图片的打开和保存。</p>
<h3 id="Widget-self-py-1"><a href="#Widget-self-py-1" class="headerlink" title="Widget_self.py"></a>Widget_self.py</h3><h4 id="初始化自定义组件的界面和链接各个部件的功能"><a href="#初始化自定义组件的界面和链接各个部件的功能" class="headerlink" title="初始化自定义组件的界面和链接各个部件的功能"></a>初始化自定义组件的界面和链接各个部件的功能</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdjustTab</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="comment"># 自定义的控件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 初始化界面</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 加入亮度调整部分</span></span><br><span class="line">        self.bright_label = QLabel(<span class="string">&quot;亮度&quot;</span>)  <span class="comment"># 显示内容，下同</span></span><br><span class="line">        self.bright_label_value = QLabel(<span class="string">&#x27;0&#x27;</span>)   <span class="comment"># 显示数值，下同</span></span><br><span class="line">        self.bright_slider = QSlider(Qt.Horizontal, self)   <span class="comment"># 加入滑动条，下同</span></span><br><span class="line">        <span class="comment"># 设置滑动条最大最小值，下同</span></span><br><span class="line">        self.bright_slider.setMaximum(<span class="number">100</span>)</span><br><span class="line">        self.bright_slider.setMinimum(-<span class="number">100</span>)</span><br><span class="line">        self.bright_slider.setValue(<span class="number">0</span>)  <span class="comment"># 设置滑动条初始值，下同</span></span><br><span class="line">        self.bright_slider.valueChanged[<span class="built_in">int</span>].connect(</span><br><span class="line">            self.changeImage)  <span class="comment"># 连接参数变更事件，下同</span></span><br><span class="line">        <span class="comment"># 加入高度调整部分</span></span><br><span class="line">        self.high_label = QLabel(<span class="string">&quot;高度&quot;</span>)</span><br><span class="line">        self.high_label_value = QLabel(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        self.high_slider = QSlider(Qt.Horizontal, self)</span><br><span class="line">        self.high_slider.setMaximum(<span class="number">100</span>)</span><br><span class="line">        self.high_slider.setMinimum(-<span class="number">100</span>)</span><br><span class="line">        self.high_slider.setValue(<span class="number">0</span>)</span><br><span class="line">        self.high_slider.valueChanged[<span class="built_in">int</span>].connect(self.changeImage)</span><br><span class="line">        <span class="comment"># 加入宽度调整部分</span></span><br><span class="line">        self.width_label = QLabel(<span class="string">&quot;宽度&quot;</span>)</span><br><span class="line">        self.width_label_value = QLabel(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        self.width_slider = QSlider(Qt.Horizontal, self)</span><br><span class="line">        self.width_slider.setMaximum(<span class="number">100</span>)</span><br><span class="line">        self.width_slider.setMinimum(-<span class="number">100</span>)</span><br><span class="line">        self.width_slider.setValue(<span class="number">0</span>)</span><br><span class="line">        self.width_slider.valueChanged[<span class="built_in">int</span>].connect(self.changeImage)</span><br><span class="line">        <span class="comment"># 加入角度调整部分</span></span><br><span class="line">        self.rotation_label = QLabel(<span class="string">&quot;角度&quot;</span>)</span><br><span class="line">        self.rotation_label_value = QLabel(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        self.rotation_slider = QSlider(Qt.Horizontal, self)</span><br><span class="line">        self.rotation_slider.setMaximum(<span class="number">180</span>)</span><br><span class="line">        self.rotation_slider.setMinimum(-<span class="number">180</span>)</span><br><span class="line">        self.rotation_slider.setValue(<span class="number">0</span>)</span><br><span class="line">        self.rotation_slider.valueChanged[<span class="built_in">int</span>].connect(self.changeImage)</span><br><span class="line">        <span class="comment"># 加入重置部分</span></span><br><span class="line">        self.reset_button = QPushButton(<span class="string">&quot;重置亮度&quot;</span>)  <span class="comment"># 加入重置亮度按钮</span></span><br><span class="line">        self.reset_button.clicked.connect(self.reset)   <span class="comment"># 连接重置亮度事件</span></span><br><span class="line">        self.bind_button = QPushButton(<span class="string">&quot;重置大小&quot;</span>)  <span class="comment"># 加入重置大小按钮</span></span><br><span class="line">        self.bind_button.clicked.connect(self.resize)   <span class="comment"># 连接重置大小事件</span></span><br><span class="line">        self.rerotation_button = QPushButton(<span class="string">&quot;重置角度&quot;</span>)    <span class="comment"># 加入重置角度按钮</span></span><br><span class="line">        self.rerotation_button.clicked.connect(self.rerotation)  <span class="comment"># 连接重置角度事件</span></span><br><span class="line">        self.watermark_button = QPushButton(<span class="string">&quot;添加水印&quot;</span>)  <span class="comment"># 加入添加水印按钮</span></span><br><span class="line">        self.watermark_button.clicked.connect(self.add_watermark)   <span class="comment"># 加入添加水印事件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 款式布局</span></span><br><span class="line">        <span class="comment"># 水平部分</span></span><br><span class="line">        hbox1 = QHBoxLayout()</span><br><span class="line">        hbox1.addWidget(self.bright_label)</span><br><span class="line">        hbox1.addWidget(self.bright_label_value)</span><br><span class="line">        hbox2 = QHBoxLayout()</span><br><span class="line">        hbox2.addWidget(self.high_label)</span><br><span class="line">        hbox2.addWidget(self.high_label_value)</span><br><span class="line">        hbox3 = QHBoxLayout()</span><br><span class="line">        hbox3.addWidget(self.width_label)</span><br><span class="line">        hbox3.addWidget(self.width_label_value)</span><br><span class="line">        hbox4 = QHBoxLayout()</span><br><span class="line">        hbox4.addWidget(self.rotation_label)</span><br><span class="line">        hbox4.addWidget(self.rotation_label_value)</span><br><span class="line">        hbox5 = QHBoxLayout()</span><br><span class="line">        hbox5.addStretch()</span><br><span class="line">        hbox5.addWidget(self.reset_button)</span><br><span class="line">        hbox5.addStretch()</span><br><span class="line">        hbox5.addWidget(self.bind_button)</span><br><span class="line">        hbox5.addStretch()</span><br><span class="line">        hbox5.addWidget(self.rerotation_button)</span><br><span class="line">        hbox5.addStretch()</span><br><span class="line">        hbox5.addWidget(self.watermark_button)</span><br><span class="line">        hbox5.addStretch()</span><br><span class="line">        <span class="comment"># 垂直部分</span></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addLayout(hbox1)</span><br><span class="line">        vbox.addWidget(self.bright_slider)</span><br><span class="line">        vbox.addLayout(hbox2)</span><br><span class="line">        vbox.addWidget(self.high_slider)</span><br><span class="line">        vbox.addLayout(hbox3)</span><br><span class="line">        vbox.addWidget(self.width_slider)</span><br><span class="line">        vbox.addLayout(hbox4)</span><br><span class="line">        vbox.addWidget(self.rotation_slider)</span><br><span class="line">        vbox.addLayout(hbox5)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br></pre></td></tr></table></figure>

<p>说明：实现GUI组件的摆放，并添加<code>QSlider</code>和<code>QLabel</code>还有<code>QButton</code>。为它们添加布局，并为这些东西添加Action，将其绑定到对应的函数上。</p>
<h4 id="改变图片的事件"><a href="#改变图片的事件" class="headerlink" title="改变图片的事件"></a>改变图片的事件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeImage</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    <span class="comment"># 改变参数事件</span></span><br><span class="line">    <span class="comment"># 从全局变量中获取image进行修改</span></span><br><span class="line">    image = Variable.get_image()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取修改参数</span></span><br><span class="line">    source = self.sender()  <span class="comment"># 判断修改参数来源，获取具体修改内容</span></span><br><span class="line">    <span class="keyword">if</span> source == self.bright_slider:</span><br><span class="line">        <span class="comment"># 修改亮度</span></span><br><span class="line">        self.bright_label_value.setText(<span class="built_in">str</span>(value))  <span class="comment"># 改变显示的值，下同</span></span><br><span class="line">        bright = (self.bright_slider.value() + <span class="number">100</span>) / <span class="number">100</span>   <span class="comment"># 获取参数，下同</span></span><br><span class="line">        process.change_bright(bright)   <span class="comment"># 改变图片相应属性值，下同</span></span><br><span class="line">    <span class="keyword">elif</span> source == self.high_slider:</span><br><span class="line">        <span class="comment"># 修改高度</span></span><br><span class="line">        self.high_label_value.setText(<span class="built_in">str</span>(value))</span><br><span class="line">        high = self.high_slider.value()</span><br><span class="line">        process.change_height(high)</span><br><span class="line">    <span class="keyword">elif</span> source == self.width_slider:</span><br><span class="line">        <span class="comment"># 修改宽度</span></span><br><span class="line">        self.width_label_value.setText(<span class="built_in">str</span>(value))</span><br><span class="line">        width = self.width_slider.value()</span><br><span class="line">        process.change_width(width)</span><br><span class="line">    <span class="keyword">elif</span> source == self.rotation_slider:</span><br><span class="line">        <span class="comment"># 修改角度</span></span><br><span class="line">        self.rotation_label_value.setText(<span class="built_in">str</span>(value))</span><br><span class="line">        angle = self.rotation_slider.value()</span><br><span class="line">        process.change_angle(angle)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 应用修改</span></span><br><span class="line">    process.process_photo(image)</span><br></pre></td></tr></table></figure>

<p>说明：本部分响应<code>QSlider</code>的改变，通过使用<code>Process</code>中的<code>.change()</code>方法，来改变图片的属性值。最后通过<code>process_photo()</code>方法执行这些改变。</p>
<h4 id="添加水印事件"><a href="#添加水印事件" class="headerlink" title="添加水印事件"></a>添加水印事件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_watermark</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 添加水印事件</span></span><br><span class="line">    image = Variable.get_image()</span><br><span class="line">    process.change_watermark()  <span class="comment"># 改变水印标志</span></span><br><span class="line">    process.process_photo(image)    <span class="comment"># 应用修改</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改按钮显示内容</span></span><br><span class="line">    <span class="keyword">if</span> process.get_watermark():</span><br><span class="line">        self.watermark_button.setText(<span class="string">&quot;取消水印&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.watermark_button.setText(<span class="string">&quot;添加水印&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>说明：本部分响应“增加水印”的<code>QButton</code>的响应，通过使用<code>Process</code>中的<code>.change()</code>方法改变水印标识，再通过<code>process_photo()</code>方法执行改变。最后还需将<code>QButton</code>的内容进行更改。</p>
<h4 id="复位事件"><a href="#复位事件" class="headerlink" title="复位事件"></a>复位事件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 重置亮度事件</span></span><br><span class="line">    self.bright_slider.setValue(<span class="number">0</span>)  <span class="comment"># 将相关值设置为初始值0，下同</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 重置大小事件</span></span><br><span class="line">    self.width_slider.setValue(<span class="number">0</span>)</span><br><span class="line">    self.high_slider.setValue(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rerotation</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 重置角度事件</span></span><br><span class="line">    self.rotation_slider.setValue(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>说明：本部分包括三个<code>QSlider</code>的复位事件，响应的是三个<code>QButton</code>的点击事件，以及图片打开事件。</p>
<h3 id="ProcessPhoto-py-1"><a href="#ProcessPhoto-py-1" class="headerlink" title="ProcessPhoto.py"></a>ProcessPhoto.py</h3><h4 id="定义一个类来存储图片属性"><a href="#定义一个类来存储图片属性" class="headerlink" title="定义一个类来存储图片属性"></a>定义一个类来存储图片属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span>():</span></span><br><span class="line">    <span class="comment"># 修改类</span></span><br><span class="line">    imagelabel = Variable.get_imagelabel()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.bright = <span class="number">1</span></span><br><span class="line">        self.sharpness = <span class="number">1</span></span><br><span class="line">        self.contrast = <span class="number">1</span></span><br><span class="line">        self.angle = <span class="number">0</span></span><br><span class="line">        self.height = <span class="number">0</span></span><br><span class="line">        self.width = <span class="number">0</span></span><br><span class="line">        self.watermark = <span class="literal">False</span></span><br><span class="line">        self.save = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>说明：定义<code>Process</code>类，专门用于对图像进行处理。因为如果只在其他地方对于图像进行处理，则会导致不同的属性处理的时候，另一属性的处理效果就会消失。所以要进行整体的封装，要将图片的各个属性进行封装，每次进行整体的处理。</p>
<h4 id="改变图片属性值的相关函数"><a href="#改变图片属性值的相关函数" class="headerlink" title="改变图片属性值的相关函数"></a>改变图片属性值的相关函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变属性值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_bright</span>(<span class="params">self, bright</span>):</span></span><br><span class="line">    self.bright = bright</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_width</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    self.width = Variable.get_width() + value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_height</span>(<span class="params">self, value</span>):</span></span><br><span class="line">    self.height = Variable.get_height() + value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_angle</span>(<span class="params">self, angle</span>):</span></span><br><span class="line">    self.angle = angle</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_watermark</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.watermark = <span class="keyword">not</span> self.watermark</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_watermark</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.watermark</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_save</span>(<span class="params">self, path</span>):</span></span><br><span class="line">    self.save = path</span><br></pre></td></tr></table></figure>

<p>说明：完成对于图片的不同属性的更改，方便之后进行处理</p>
<h4 id="Process-photo-函数"><a href="#Process-photo-函数" class="headerlink" title="Process_photo()函数"></a>Process_photo()函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_photo</span>(<span class="params">self, image</span>):</span></span><br><span class="line">    <span class="comment"># 应用修改</span></span><br><span class="line">    <span class="keyword">if</span> image <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        enhancer = ImageEnhance.Brightness(image)   <span class="comment"># 获取图片亮度</span></span><br><span class="line">        image = enhancer.enhance(self.bright)   <span class="comment"># 修改图片亮度</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.watermark:</span><br><span class="line">            idraw = ImageDraw.Draw(image)   <span class="comment"># 添加水印</span></span><br><span class="line">            <span class="comment"># 设置水印内容</span></span><br><span class="line">            text = <span class="string">&quot;Watermark&quot;</span></span><br><span class="line">            font = ImageFont.truetype(<span class="string">&quot;arial.ttf&quot;</span>, size=<span class="number">200</span>)</span><br><span class="line">            idraw.text((<span class="number">10</span>, <span class="number">10</span>), text, font=font)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 应用图片旋转</span></span><br><span class="line">        image = image.rotate(self.angle)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 显示图片修改效果</span></span><br><span class="line">        imagelabel = Variable.get_imagelabel()</span><br><span class="line">        qimg = ImageQt(image)</span><br><span class="line">        img_pix = QPixmap.fromImage(qimg, Qt.AutoColor)</span><br><span class="line">        img_pix = img_pix.scaled(self.width, self.height)   <span class="comment"># 应用图片大小设置</span></span><br><span class="line">        imagelabel.setPixmap(img_pix)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果存储标准不为False，则进行保存，保存完将标志重新设置为False</span></span><br><span class="line">        <span class="keyword">if</span> self.save:</span><br><span class="line">            img_pix.save(self.save)</span><br><span class="line">            self.save = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>说明：对于图像的处理函数，由于<code>Pillow</code>库自带的函数性质，可以每次从头进行图片的处理，以达到和GUI界面更好的契合。本函数主要是根据图片的各种参数、标识进行执行修改。</p>
<h3 id="Variable-py-1"><a href="#Variable-py-1" class="headerlink" title="Variable.py"></a>Variable.py</h3><h4 id="全局常量"><a href="#全局常量" class="headerlink" title="全局常量"></a>全局常量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常量的定义</span></span><br><span class="line">WINDOW_WIDTH = <span class="number">1000</span></span><br><span class="line">WINDOW_HEIGHT = <span class="number">1000</span></span><br><span class="line">DEFAULT_WIDTH = <span class="number">800</span></span><br><span class="line">DEFAULT_HEIGHT = <span class="number">600</span></span><br></pre></td></tr></table></figure>

<p>说明：对在整个程序中用到的常量进行定义</p>
<h4 id="Variable类存储全局变量"><a href="#Variable类存储全局变量" class="headerlink" title="Variable类存储全局变量"></a>Variable类存储全局变量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Variable</span>:</span></span><br><span class="line">    <span class="comment"># 全局变量</span></span><br><span class="line">    image = <span class="literal">None</span></span><br><span class="line">    imagelabel = <span class="literal">None</span></span><br><span class="line">    width = <span class="number">0</span></span><br><span class="line">    height = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_width</span>(<span class="params">value</span>):</span></span><br><span class="line">    Variable.width = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_width</span>():</span></span><br><span class="line">    <span class="keyword">return</span> Variable.width</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_height</span>(<span class="params">value</span>):</span></span><br><span class="line">    Variable.height = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_height</span>():</span></span><br><span class="line">    <span class="keyword">return</span> Variable.height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_image</span>(<span class="params">image</span>):</span></span><br><span class="line">    Variable.image = image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_image</span>():</span></span><br><span class="line">    <span class="keyword">return</span> Variable.image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_imagelabel</span>(<span class="params">imagelabel</span>):</span></span><br><span class="line">    Variable.imagelabel = imagelabel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_imagelabel</span>():</span></span><br><span class="line">    <span class="keyword">return</span> Variable.imagelabel</span><br></pre></td></tr></table></figure>

<p>说明：保存用到的全局变量，并为其添加<code>.set()</code>和<code>.get()</code>函数用于设置和取得对应的全局变量的值。</p>
<h1 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h1><h2 id="程序运行主界面"><a href="#程序运行主界面" class="headerlink" title="程序运行主界面"></a>程序运行主界面</h2><p><img data-src="https://img-blog.csdnimg.cn/20210624210331431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70" alt="程序运行主界面"></p>
<h2 id="读取图片之后的界面"><a href="#读取图片之后的界面" class="headerlink" title="读取图片之后的界面"></a>读取图片之后的界面</h2><p><img data-src="https://img-blog.csdnimg.cn/2021062421044621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70" alt="读取图片之后的界面"></p>
<h2 id="使用各种操作调整图片"><a href="#使用各种操作调整图片" class="headerlink" title="使用各种操作调整图片"></a>使用各种操作调整图片</h2><p><img data-src="https://img-blog.csdnimg.cn/20210624210503306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70" alt="使用各种操作调整图片"></p>
<h2 id="保存功能"><a href="#保存功能" class="headerlink" title="保存功能"></a>保存功能</h2><p><img data-src="https://img-blog.csdnimg.cn/2021062421053175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70" alt="保存功能"></p>
<h2 id="重置功能和取消水印"><a href="#重置功能和取消水印" class="headerlink" title="重置功能和取消水印"></a>重置功能和取消水印</h2><p>本次使用了重置角度功能和取消水印功能<br><img data-src="https://img-blog.csdnimg.cn/20210624210553751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70" alt="重置角度功能和取消水印功能"></p>
<h2 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h2><p><img data-src="https://img-blog.csdnimg.cn/20210624210626479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NDg4OTc=,size_16,color_FFFFFF,t_70" alt="退出功能"></p>
<h1 id="结论与未来方向"><a href="#结论与未来方向" class="headerlink" title="结论与未来方向"></a>结论与未来方向</h1><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>该项目完成了一些图片处理的基本功能，加深了我对于<code>PyQt5</code>和<code>Pillow</code>库的了解。看着一个项目从无到有，自己的编程信心有了很大的提升。并对开发流程及注意事项有了一定的了解。最令我深刻的体会是，在开发中，要尽量解耦合，时时刻刻准备相应变化，让自己的代码在应对不同的需求的时候可以尽量少的改动。</p>
<h2 id="未来方向"><a href="#未来方向" class="headerlink" title="未来方向"></a>未来方向</h2><p>虽然已经完成了大部分的功能，但仍然还有很大的扩展空间，例如滤镜、裁剪等功能，这样对于图片的操作更加的自由地实现对于图片的编辑。但由于时间精力原因无法做到更好，十分遗憾。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢常同学的督促与激励。</p>
<h1 id="参考文献与链接"><a href="#参考文献与链接" class="headerlink" title="参考文献与链接"></a>参考文献与链接</h1><p>[1] <a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/">PyQt5 Reference Guide</a><br>[2] <a href="https://www.baidu.com/link?url=GcfQN3fUOddnL6zB2AIYUkssiK93ZZduqfUwyYclV6yoQrICSSykRgqgXY4eUAxr&wd=&eqid=a816220e0006db140000000360d47467">Pillow — Pillow (PIL Fork) 8.2.0 documentation</a><br>[3] <a href="http://code.py40.com/pyqt5/14.html">PyQt5中文教程</a></p>
<h1 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h1><p>本作业已上传至Github以及Gitee，希望各位能点个star再走 :smile:。</p>
<p><a href="https://github.com/GLORYFeonix/Python_Learning_Homework">GitHub</a></p>
<p><a href="https://gitee.com/gzy8810/Python_Learning_Homework">Gitee</a></p>
]]></content>
      <categories>
        <category>Python程序设计</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
